//? –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é Debounce
// –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π delay —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
// –†–µ—Å–∞–π–∑ –æ–∫–Ω–∞, –≤–≤–æ–¥—ã –≤ –ø–æ–ª—è—Ö, —Å–∫—Ä–æ–ª–ª —Å–æ–±—ã—Ç–∏–π, –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

function debounce(fn, delay) {
  let timeoutId;

  return function (...args) {
    clearTimeout(timeoutId); // —Å–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
    timeoutId = setTimeout(() => {
      fn.apply(this, args); // –≤—ã–∑–≤–∞—Ç—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    }, delay);
  };
}

//  –í –†–µ–∞–∫—Ç–µ ========================================================
// import React, { useState, useEffect, useMemo } from "react";

// function useDebouncedValue(value, delay) {
//   const [debounced, setDebounced] = useState(value);

//   useEffect(() => {
//     const timeout = setTimeout(() => {
//       setDebounced(value);
//     }, delay);

//     return () => clearTimeout(timeout);
//   }, [value, delay]);

//   return debounced;
// }

// function SearchInput() {
//   const [search, setSearch] = useState("");

//   // debounce –Ω–∞ 500 –º—Å
//   const debouncedSearch = useDebouncedValue(search, 500);

//   // —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ debounce "—Å—Ä–∞–±–æ—Ç–∞–ª"
//   useEffect(() => {
//     if (debouncedSearch.trim()) {
//       console.log("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ:", debouncedSearch);
//   // fetchData(debouncedSearch) –∏ —Ç.–ø.
//     }
//   }, [debouncedSearch]);

//   return (
//     <input
//       value={search}
//       onChange={(e) => setSearch(e.target.value)}
//       placeholder="–ü–æ–∏—Å–∫..."
//     />
//   );
// }

//? –û–±—å—è—Å–Ω–∏ —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è, –ø–µ—Ä–µ–ø–∏—à–∏ –≤ –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å

//  function wtf(s) {
//     for (var i = s.length - 1, o = ''; i >= 0;  o += s[i--] ) {

//   }

//   return o

// }

// console.log(wtf("ABC")) //

//? –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ –ª—é–±–æ–π –≥–ª—É–±–∏–Ω—ã, –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤

//   let result = flattenArray([1, [2, [3, [4, 5], [6, 7, 8, [9, 10]]]]]);

//* –í–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ä–µ–∫—É—Ä—Å–∏–µ–π

//  const flattenArray = arr => arr.reduce((accumulator, value) =>
//     accumulator.concat(Array.isArray(value) ? flattenArray(value) : value),
//     []);

// const flattenArray = (arr) => {
//     let result = [];

//     for(const value of arr) {
//       if(Array.isArray(value)) {
//         result.push(...flattenArray(value))
//       }
//       else {
//         result.push(value)
//       }
//     }
//     return result
//   }

//* –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

//  const flattenArray = (arr) => {
//     const stack = [...arr];
//     const result = [];

//     while(stack.length) {
//         const value = stack.pop();
//         if(Array.isArray(value)) {
//             stack.push(...value)
//         }
//         else {
//             result.push(value)
//         }
//     }
//     return result.reverse()
//  }

//   console.log(result); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

//? –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω–µ—Ç —á–∏—Å–ª–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤ –ø—Ä–∏–º–µ—Ä–µ –º–∞—Å—Å–∏–≤—É –ø–æ–ª—É—á–∏—Ç—Å—è [2, 5, 1, 7]

// const arr = [1,1,2,2,2,5,5,5,2,7];

// const fooo = (arr) => {

// const freqMap = arr.reduce((acc, num) => {
//       acc[num] = (acc[num] || 0 ) + 1;
//     return acc;
//   }, {});

// return Object.entries(freqMap).sort((a, b)=>b[1] - a[1]).map((elem)=>+elem[0])

// }

//? –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ª–æ–≥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ Event loop

// console.log(1);

// setTimeout(() => console.log(2));

// Promise.reject(3).catch(console.log).then(() => console.log(7));

// new Promise(resolve => setTimeout(resolve)).then(() => console.log(4));

// Promise.resolve(5).then(console.log).then(() => console.log(8));

// console.log(6);
//! ===================================================
// –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –ª–∏–±–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–µ–¥—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏–π:
// - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Å–∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö value —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å–∏–º–≤–æ–ª–æ–≤,
// - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–µ–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è order
// - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
// const input = [
//   { value: "abcd", order: 4, expired: false },
//   { value: "qwer", order: 2, expired: true },
//   { value: "xyz1", order: 1, expired: false },
//   { value: "abx2", order: 3, expired: false },
// ];

// Promise.reject('a')
//   .catch(p => {
//     throw p + 'b'; // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –æ—à–∏–±–∫—É
//   })
//   .catch(p => p + 'c') // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –æ—à–∏–±–∫—É
//   .then(p => p + 'd')  // –†–µ–∑—É–ª—å—Ç–∞—Ç: 'abc'
//   .then(p => console.log(p)); // –í—ã–≤–æ–¥: 'abcd'
////? –°–ø–æ—Å–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Å—Ç–∞–º–∏
// let a = 1;
// let b = 2;

// [a, b] = [b, a]

// a = a + b;
// b = a - b
// a = a - b

// a = a ^ b
// b = a ^ b
// a = a ^ b

// let tmp = a;
// a = b;
// b = tmp

//? ===================================================
